
//! Autogenerated weights for `pallet_issuers`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-11-24, STEPS: `100`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ip-172-31-28-224`, CPU: `Intel(R) Xeon(R) CPU E5-2686 v4 @ 2.30GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// target/release/solochain-template-node
// benchmark
// pallet
// --chain=dev
// --steps=100
// --repeat=50
// --pallet=pallet-issuers
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/issuers/src/weights.rs
// --template=frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_issuers`.
pub trait WeightInfo {
	fn create_issuer(n: u32, c: u32, ) -> Weight;
	fn edit_controllers(c: u32, ) -> Weight;
}

/// Weights for `pallet_issuers` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `IssuersModule::Issuers` (r:1 w:1)
	/// Proof: `IssuersModule::Issuers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 119]`.
	/// The range of component `c` is `[1, 19]`.
	fn create_issuer(n: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3471`
		// Minimum execution time: 29_850_000 picoseconds.
		Weight::from_parts(30_991_355, 3471)
			// Standard Error: 276
			.saturating_add(Weight::from_parts(5_593, 0).saturating_mul(n.into()))
			// Standard Error: 1_779
			.saturating_add(Weight::from_parts(47_701, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `IssuersModule::Issuers` (r:1 w:1)
	/// Proof: `IssuersModule::Issuers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[1, 19]`.
	fn edit_controllers(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `845`
		//  Estimated: `4310`
		// Minimum execution time: 32_842_000 picoseconds.
		Weight::from_parts(34_288_735, 4310)
			// Standard Error: 1_427
			.saturating_add(Weight::from_parts(77_486, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `IssuersModule::Issuers` (r:1 w:1)
	/// Proof: `IssuersModule::Issuers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[1, 119]`.
	/// The range of component `c` is `[1, 19]`.
	fn create_issuer(n: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3471`
		// Minimum execution time: 29_850_000 picoseconds.
		Weight::from_parts(30_991_355, 3471)
			// Standard Error: 276
			.saturating_add(Weight::from_parts(5_593, 0).saturating_mul(n.into()))
			// Standard Error: 1_779
			.saturating_add(Weight::from_parts(47_701, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `IssuersModule::Issuers` (r:1 w:1)
	/// Proof: `IssuersModule::Issuers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `c` is `[1, 19]`.
	fn edit_controllers(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `845`
		//  Estimated: `4310`
		// Minimum execution time: 32_842_000 picoseconds.
		Weight::from_parts(34_288_735, 4310)
			// Standard Error: 1_427
			.saturating_add(Weight::from_parts(77_486, 0).saturating_mul(c.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}