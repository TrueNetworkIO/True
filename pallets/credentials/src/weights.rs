
//! Autogenerated weights for `pallet_credentials`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-12-31, STEPS: `100`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Tushars-MacBook-Air.local`, CPU: `<UNKNOWN>`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// target/release/solochain-template-node
// benchmark
// pallet
// --chain=dev
// --steps=100
// --repeat=50
// --pallet=pallet-credentials
// --extrinsic=*
// --output=./pallets/credentials/src/weights.rs
// --template=frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_credentials`.
pub trait WeightInfo {
	fn create_schema(f: u32, s: u32, ) -> Weight;
	fn attest(f: u32, s: u32, a: u32, ) -> Weight;
	fn update_attestation(f: u32, s: u32, n: u32, ) -> Weight;
}

/// Weights for `pallet_credentials` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `CredentialsModule::Schemas` (r:1 w:1)
	/// Proof: `CredentialsModule::Schemas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `IssuersModule::Issuers` (r:1 w:0)
	/// Proof: `IssuersModule::Issuers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `f` is `[1, 20]`.
	/// The range of component `s` is `[1, 120]`.
	fn create_schema(f: u32, _s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `313`
		//  Estimated: `3778`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_275_691, 3778)
			// Standard Error: 1_192
			.saturating_add(Weight::from_parts(880_407, 0).saturating_mul(f.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `IssuersModule::Issuers` (r:1 w:0)
	/// Proof: `IssuersModule::Issuers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CredentialsModule::Schemas` (r:1 w:0)
	/// Proof: `CredentialsModule::Schemas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CredentialsModule::Attestations` (r:1 w:1)
	/// Proof: `CredentialsModule::Attestations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `f` is `[1, 20]`.
	/// The range of component `s` is `[1, 120]`.
	/// The range of component `a` is `[0, 2]`.
	fn attest(f: u32, s: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `386 + f * (9 ±0)`
		//  Estimated: `3852 + f * (10 ±0)`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(21_149_098, 3852)
			// Standard Error: 6_615
			.saturating_add(Weight::from_parts(724_311, 0).saturating_mul(f.into()))
			// Standard Error: 1_077
			.saturating_add(Weight::from_parts(35_287, 0).saturating_mul(s.into()))
			// Standard Error: 50_147
			.saturating_add(Weight::from_parts(49_819, 0).saturating_mul(a.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 10).saturating_mul(f.into()))
	}
	/// Storage: `IssuersModule::Issuers` (r:1 w:0)
	/// Proof: `IssuersModule::Issuers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CredentialsModule::Schemas` (r:1 w:0)
	/// Proof: `CredentialsModule::Schemas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CredentialsModule::Attestations` (r:1 w:1)
	/// Proof: `CredentialsModule::Attestations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `f` is `[1, 20]`.
	/// The range of component `s` is `[1, 120]`.
	/// The range of component `n` is `[1, 100]`.
	fn update_attestation(f: u32, s: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + f * (4159 ±0) + n * (831 ±0) + s * (504 ±0)`
		//  Estimated: `5020 + f * (1024 ±23) + n * (297 ±4) + s * (63 ±3)`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(42_000_000, 5020)
			// Standard Error: 67_794
			.saturating_add(Weight::from_parts(8_980_322, 0).saturating_mul(f.into()))
			// Standard Error: 13_455
			.saturating_add(Weight::from_parts(1_893_601, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1024).saturating_mul(f.into()))
			.saturating_add(Weight::from_parts(0, 297).saturating_mul(n.into()))
			.saturating_add(Weight::from_parts(0, 63).saturating_mul(s.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `CredentialsModule::Schemas` (r:1 w:1)
	/// Proof: `CredentialsModule::Schemas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `IssuersModule::Issuers` (r:1 w:0)
	/// Proof: `IssuersModule::Issuers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `f` is `[1, 20]`.
	/// The range of component `s` is `[1, 120]`.
	fn create_schema(f: u32, _s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `313`
		//  Estimated: `3778`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_275_691, 3778)
			// Standard Error: 1_192
			.saturating_add(Weight::from_parts(880_407, 0).saturating_mul(f.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `IssuersModule::Issuers` (r:1 w:0)
	/// Proof: `IssuersModule::Issuers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CredentialsModule::Schemas` (r:1 w:0)
	/// Proof: `CredentialsModule::Schemas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CredentialsModule::Attestations` (r:1 w:1)
	/// Proof: `CredentialsModule::Attestations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `f` is `[1, 20]`.
	/// The range of component `s` is `[1, 120]`.
	/// The range of component `a` is `[0, 2]`.
	fn attest(f: u32, s: u32, a: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `386 + f * (9 ±0)`
		//  Estimated: `3852 + f * (10 ±0)`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(21_149_098, 3852)
			// Standard Error: 6_615
			.saturating_add(Weight::from_parts(724_311, 0).saturating_mul(f.into()))
			// Standard Error: 1_077
			.saturating_add(Weight::from_parts(35_287, 0).saturating_mul(s.into()))
			// Standard Error: 50_147
			.saturating_add(Weight::from_parts(49_819, 0).saturating_mul(a.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 10).saturating_mul(f.into()))
	}
	/// Storage: `IssuersModule::Issuers` (r:1 w:0)
	/// Proof: `IssuersModule::Issuers` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CredentialsModule::Schemas` (r:1 w:0)
	/// Proof: `CredentialsModule::Schemas` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CredentialsModule::Attestations` (r:1 w:1)
	/// Proof: `CredentialsModule::Attestations` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `f` is `[1, 20]`.
	/// The range of component `s` is `[1, 120]`.
	/// The range of component `n` is `[1, 100]`.
	fn update_attestation(f: u32, s: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + f * (4159 ±0) + n * (831 ±0) + s * (504 ±0)`
		//  Estimated: `5020 + f * (1024 ±23) + n * (297 ±4) + s * (63 ±3)`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(42_000_000, 5020)
			// Standard Error: 67_794
			.saturating_add(Weight::from_parts(8_980_322, 0).saturating_mul(f.into()))
			// Standard Error: 13_455
			.saturating_add(Weight::from_parts(1_893_601, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
			.saturating_add(Weight::from_parts(0, 1024).saturating_mul(f.into()))
			.saturating_add(Weight::from_parts(0, 297).saturating_mul(n.into()))
			.saturating_add(Weight::from_parts(0, 63).saturating_mul(s.into()))
	}
}